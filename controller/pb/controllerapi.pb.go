// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto

package controllerapi

import (
	context "context"
	fmt "fmt"
	datamodel "github.com/NEU-SNS/revtr-vp/datamodel"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto", fileDescriptor_6ad79e3576f6c9f5)
}

var fileDescriptor_6ad79e3576f6c9f5 = []byte{
	// 284 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0x3b, 0x91, 0x1d, 0x02, 0x32, 0x89, 0x13, 0xa4, 0xc7, 0x5e, 0xf4, 0x62, 0x23, 0x8a,
	0x07, 0x0f, 0x22, 0x55, 0xd4, 0xdb, 0x28, 0xad, 0xdb, 0xc1, 0x5b, 0xda, 0x3e, 0x6b, 0xa0, 0xcb,
	0x8b, 0xc9, 0x6b, 0x3f, 0x86, 0x9f, 0x59, 0xba, 0x8d, 0xae, 0x1b, 0x3b, 0xd8, 0x63, 0x7e, 0x79,
	0xff, 0x5f, 0x92, 0x3f, 0x61, 0x6f, 0xa5, 0xa2, 0xef, 0x3a, 0x0b, 0x73, 0x5c, 0x8a, 0xd9, 0xeb,
	0xfc, 0x3a, 0x9d, 0xa5, 0x22, 0x81, 0x06, 0xac, 0x83, 0x0f, 0x2b, 0x73, 0xb0, 0x58, 0x13, 0x88,
	0x1c, 0x35, 0x59, 0xac, 0x2a, 0xb0, 0xc2, 0x64, 0xbd, 0x95, 0x34, 0x2a, 0x34, 0x16, 0x09, 0xf9,
	0xc9, 0x0e, 0xf4, 0x1f, 0xfe, 0xa5, 0x2d, 0x24, 0xc9, 0x25, 0x16, 0x50, 0x09, 0xa3, 0x74, 0xb9,
	0x36, 0xf9, 0x4f, 0x03, 0xa3, 0xd4, 0xc1, 0x8d, 0x20, 0x1a, 0x28, 0x68, 0xa4, 0x26, 0x59, 0x82,
	0x41, 0xa5, 0x69, 0xa3, 0x78, 0x1c, 0xa8, 0xb0, 0x90, 0x3b, 0x83, 0xf8, 0xb5, 0x8e, 0xdf, 0xfe,
	0x1e, 0x31, 0xf6, 0xd2, 0xf5, 0xc1, 0x05, 0x3b, 0x8e, 0x95, 0x2e, 0x39, 0x0f, 0xbb, 0x44, 0xd8,
	0x82, 0xc8, 0x96, 0xfe, 0x64, 0x8f, 0x05, 0xde, 0xcd, 0x88, 0x47, 0x8c, 0x6d, 0x8f, 0xe1, 0x17,
	0xbd, 0x91, 0x2d, 0x6e, 0xc3, 0xe7, 0x07, 0x77, 0x56, 0x8a, 0x7b, 0x36, 0x7e, 0x07, 0x5a, 0xc4,
	0x8e, 0x4f, 0x7b, 0x43, 0x8b, 0x38, 0x81, 0x9f, 0x1a, 0x1c, 0xf9, 0x67, 0x7b, 0x94, 0x6a, 0xab,
	0x03, 0x8f, 0xcf, 0xd9, 0x34, 0x81, 0x1c, 0x54, 0x03, 0x69, 0xfb, 0x1e, 0x28, 0x62, 0x8b, 0x19,
	0x38, 0x7e, 0xda, 0xbf, 0x66, 0x8b, 0xfc, 0xcb, 0x1e, 0x39, 0x14, 0x49, 0xc0, 0x19, 0xd4, 0x0e,
	0x02, 0xef, 0x6a, 0xf4, 0x3c, 0xf9, 0xdc, 0xfd, 0x1f, 0xd9, 0x78, 0x55, 0xd4, 0xdd, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa8, 0xae, 0x8f, 0xe6, 0x7f, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControllerClient is the client API for Controller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControllerClient interface {
	Ping(ctx context.Context, in *datamodel.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error)
	Traceroute(ctx context.Context, in *datamodel.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error)
	GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error)
	ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) Ping(ctx context.Context, in *datamodel.PingArg, opts ...grpc.CallOption) (Controller_PingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[0], "/controllerapi.Controller/Ping", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerPingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_PingClient interface {
	Recv() (*datamodel.Ping, error)
	grpc.ClientStream
}

type controllerPingClient struct {
	grpc.ClientStream
}

func (x *controllerPingClient) Recv() (*datamodel.Ping, error) {
	m := new(datamodel.Ping)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) Traceroute(ctx context.Context, in *datamodel.TracerouteArg, opts ...grpc.CallOption) (Controller_TracerouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[1], "/controllerapi.Controller/Traceroute", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerTracerouteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Controller_TracerouteClient interface {
	Recv() (*datamodel.Traceroute, error)
	grpc.ClientStream
}

type controllerTracerouteClient struct {
	grpc.ClientStream
}

func (x *controllerTracerouteClient) Recv() (*datamodel.Traceroute, error) {
	m := new(datamodel.Traceroute)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controllerClient) GetVPs(ctx context.Context, in *datamodel.VPRequest, opts ...grpc.CallOption) (*datamodel.VPReturn, error) {
	out := new(datamodel.VPReturn)
	err := c.cc.Invoke(ctx, "/controllerapi.Controller/GetVPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) ReceiveSpoofedProbes(ctx context.Context, opts ...grpc.CallOption) (Controller_ReceiveSpoofedProbesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Controller_serviceDesc.Streams[2], "/controllerapi.Controller/ReceiveSpoofedProbes", opts...)
	if err != nil {
		return nil, err
	}
	x := &controllerReceiveSpoofedProbesClient{stream}
	return x, nil
}

type Controller_ReceiveSpoofedProbesClient interface {
	Send(*datamodel.Probe) error
	CloseAndRecv() (*datamodel.ReceiveSpoofedProbesResponse, error)
	grpc.ClientStream
}

type controllerReceiveSpoofedProbesClient struct {
	grpc.ClientStream
}

func (x *controllerReceiveSpoofedProbesClient) Send(m *datamodel.Probe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesClient) CloseAndRecv() (*datamodel.ReceiveSpoofedProbesResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(datamodel.ReceiveSpoofedProbesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControllerServer is the server API for Controller service.
type ControllerServer interface {
	Ping(*datamodel.PingArg, Controller_PingServer) error
	Traceroute(*datamodel.TracerouteArg, Controller_TracerouteServer) error
	GetVPs(context.Context, *datamodel.VPRequest) (*datamodel.VPReturn, error)
	ReceiveSpoofedProbes(Controller_ReceiveSpoofedProbesServer) error
}

// UnimplementedControllerServer can be embedded to have forward compatible implementations.
type UnimplementedControllerServer struct {
}

func (*UnimplementedControllerServer) Ping(req *datamodel.PingArg, srv Controller_PingServer) error {
	return status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedControllerServer) Traceroute(req *datamodel.TracerouteArg, srv Controller_TracerouteServer) error {
	return status.Errorf(codes.Unimplemented, "method Traceroute not implemented")
}
func (*UnimplementedControllerServer) GetVPs(ctx context.Context, req *datamodel.VPRequest) (*datamodel.VPReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVPs not implemented")
}
func (*UnimplementedControllerServer) ReceiveSpoofedProbes(srv Controller_ReceiveSpoofedProbesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveSpoofedProbes not implemented")
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_Ping_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel.PingArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Ping(m, &controllerPingServer{stream})
}

type Controller_PingServer interface {
	Send(*datamodel.Ping) error
	grpc.ServerStream
}

type controllerPingServer struct {
	grpc.ServerStream
}

func (x *controllerPingServer) Send(m *datamodel.Ping) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_Traceroute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(datamodel.TracerouteArg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControllerServer).Traceroute(m, &controllerTracerouteServer{stream})
}

type Controller_TracerouteServer interface {
	Send(*datamodel.Traceroute) error
	grpc.ServerStream
}

type controllerTracerouteServer struct {
	grpc.ServerStream
}

func (x *controllerTracerouteServer) Send(m *datamodel.Traceroute) error {
	return x.ServerStream.SendMsg(m)
}

func _Controller_GetVPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(datamodel.VPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).GetVPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllerapi.Controller/GetVPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).GetVPs(ctx, req.(*datamodel.VPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_ReceiveSpoofedProbes_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControllerServer).ReceiveSpoofedProbes(&controllerReceiveSpoofedProbesServer{stream})
}

type Controller_ReceiveSpoofedProbesServer interface {
	SendAndClose(*datamodel.ReceiveSpoofedProbesResponse) error
	Recv() (*datamodel.Probe, error)
	grpc.ServerStream
}

type controllerReceiveSpoofedProbesServer struct {
	grpc.ServerStream
}

func (x *controllerReceiveSpoofedProbesServer) SendAndClose(m *datamodel.ReceiveSpoofedProbesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controllerReceiveSpoofedProbesServer) Recv() (*datamodel.Probe, error) {
	m := new(datamodel.Probe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "controllerapi.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVPs",
			Handler:    _Controller_GetVPs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Ping",
			Handler:       _Controller_Ping_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Traceroute",
			Handler:       _Controller_Traceroute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ReceiveSpoofedProbes",
			Handler:       _Controller_ReceiveSpoofedProbes_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/NEU-SNS/ReverseTraceroute/controller/pb/controllerapi.proto",
}
