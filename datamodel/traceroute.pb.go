// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/NEU-SNS/ReverseTraceroute/datamodel/traceroute.proto

package datamodel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TracerouteMeasurement struct {
	Staleness            int64    `protobuf:"varint,1,opt,name=staleness,proto3" json:"staleness,omitempty"`
	Dst                  uint32   `protobuf:"varint,3,opt,name=dst,proto3" json:"dst,omitempty"`
	Confidence           string   `protobuf:"bytes,4,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Dport                string   `protobuf:"bytes,5,opt,name=dport,proto3" json:"dport,omitempty"`
	FirstHop             string   `protobuf:"bytes,6,opt,name=first_hop,json=firstHop,proto3" json:"first_hop,omitempty"`
	GapLimit             string   `protobuf:"bytes,7,opt,name=gap_limit,json=gapLimit,proto3" json:"gap_limit,omitempty"`
	GapAction            string   `protobuf:"bytes,8,opt,name=gap_action,json=gapAction,proto3" json:"gap_action,omitempty"`
	MaxTtl               string   `protobuf:"bytes,9,opt,name=max_ttl,json=maxTtl,proto3" json:"max_ttl,omitempty"`
	PathDiscov           bool     `protobuf:"varint,10,opt,name=path_discov,json=pathDiscov,proto3" json:"path_discov,omitempty"`
	Loops                string   `protobuf:"bytes,11,opt,name=loops,proto3" json:"loops,omitempty"`
	LoopAction           string   `protobuf:"bytes,12,opt,name=loop_action,json=loopAction,proto3" json:"loop_action,omitempty"`
	Payload              string   `protobuf:"bytes,13,opt,name=payload,proto3" json:"payload,omitempty"`
	Method               string   `protobuf:"bytes,14,opt,name=method,proto3" json:"method,omitempty"`
	Attempts             string   `protobuf:"bytes,15,opt,name=attempts,proto3" json:"attempts,omitempty"`
	SendAll              bool     `protobuf:"varint,16,opt,name=send_all,json=sendAll,proto3" json:"send_all,omitempty"`
	Sport                string   `protobuf:"bytes,17,opt,name=sport,proto3" json:"sport,omitempty"`
	Src                  uint32   `protobuf:"varint,18,opt,name=src,proto3" json:"src,omitempty"`
	Tos                  string   `protobuf:"bytes,19,opt,name=tos,proto3" json:"tos,omitempty"`
	TimeExceeded         bool     `protobuf:"varint,20,opt,name=time_exceeded,json=timeExceeded,proto3" json:"time_exceeded,omitempty"`
	UserId               string   `protobuf:"bytes,21,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Wait                 string   `protobuf:"bytes,22,opt,name=wait,proto3" json:"wait,omitempty"`
	WaitProbe            string   `protobuf:"bytes,23,opt,name=wait_probe,json=waitProbe,proto3" json:"wait_probe,omitempty"`
	GssEntry             string   `protobuf:"bytes,24,opt,name=gss_entry,json=gssEntry,proto3" json:"gss_entry,omitempty"`
	LssName              string   `protobuf:"bytes,25,opt,name=lss_name,json=lssName,proto3" json:"lss_name,omitempty"`
	Timeout              int64    `protobuf:"varint,26,opt,name=timeout,proto3" json:"timeout,omitempty"`
	CheckCache           bool     `protobuf:"varint,27,opt,name=check_cache,json=checkCache,proto3" json:"check_cache,omitempty"`
	CheckDb              bool     `protobuf:"varint,28,opt,name=check_db,json=checkDb,proto3" json:"check_db,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteMeasurement) Reset()         { *m = TracerouteMeasurement{} }
func (m *TracerouteMeasurement) String() string { return proto.CompactTextString(m) }
func (*TracerouteMeasurement) ProtoMessage()    {}
func (*TracerouteMeasurement) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{0}
}

func (m *TracerouteMeasurement) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteMeasurement.Unmarshal(m, b)
}
func (m *TracerouteMeasurement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteMeasurement.Marshal(b, m, deterministic)
}
func (m *TracerouteMeasurement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteMeasurement.Merge(m, src)
}
func (m *TracerouteMeasurement) XXX_Size() int {
	return xxx_messageInfo_TracerouteMeasurement.Size(m)
}
func (m *TracerouteMeasurement) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteMeasurement.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteMeasurement proto.InternalMessageInfo

func (m *TracerouteMeasurement) GetStaleness() int64 {
	if m != nil {
		return m.Staleness
	}
	return 0
}

func (m *TracerouteMeasurement) GetDst() uint32 {
	if m != nil {
		return m.Dst
	}
	return 0
}

func (m *TracerouteMeasurement) GetConfidence() string {
	if m != nil {
		return m.Confidence
	}
	return ""
}

func (m *TracerouteMeasurement) GetDport() string {
	if m != nil {
		return m.Dport
	}
	return ""
}

func (m *TracerouteMeasurement) GetFirstHop() string {
	if m != nil {
		return m.FirstHop
	}
	return ""
}

func (m *TracerouteMeasurement) GetGapLimit() string {
	if m != nil {
		return m.GapLimit
	}
	return ""
}

func (m *TracerouteMeasurement) GetGapAction() string {
	if m != nil {
		return m.GapAction
	}
	return ""
}

func (m *TracerouteMeasurement) GetMaxTtl() string {
	if m != nil {
		return m.MaxTtl
	}
	return ""
}

func (m *TracerouteMeasurement) GetPathDiscov() bool {
	if m != nil {
		return m.PathDiscov
	}
	return false
}

func (m *TracerouteMeasurement) GetLoops() string {
	if m != nil {
		return m.Loops
	}
	return ""
}

func (m *TracerouteMeasurement) GetLoopAction() string {
	if m != nil {
		return m.LoopAction
	}
	return ""
}

func (m *TracerouteMeasurement) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *TracerouteMeasurement) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *TracerouteMeasurement) GetAttempts() string {
	if m != nil {
		return m.Attempts
	}
	return ""
}

func (m *TracerouteMeasurement) GetSendAll() bool {
	if m != nil {
		return m.SendAll
	}
	return false
}

func (m *TracerouteMeasurement) GetSport() string {
	if m != nil {
		return m.Sport
	}
	return ""
}

func (m *TracerouteMeasurement) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *TracerouteMeasurement) GetTos() string {
	if m != nil {
		return m.Tos
	}
	return ""
}

func (m *TracerouteMeasurement) GetTimeExceeded() bool {
	if m != nil {
		return m.TimeExceeded
	}
	return false
}

func (m *TracerouteMeasurement) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TracerouteMeasurement) GetWait() string {
	if m != nil {
		return m.Wait
	}
	return ""
}

func (m *TracerouteMeasurement) GetWaitProbe() string {
	if m != nil {
		return m.WaitProbe
	}
	return ""
}

func (m *TracerouteMeasurement) GetGssEntry() string {
	if m != nil {
		return m.GssEntry
	}
	return ""
}

func (m *TracerouteMeasurement) GetLssName() string {
	if m != nil {
		return m.LssName
	}
	return ""
}

func (m *TracerouteMeasurement) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *TracerouteMeasurement) GetCheckCache() bool {
	if m != nil {
		return m.CheckCache
	}
	return false
}

func (m *TracerouteMeasurement) GetCheckDb() bool {
	if m != nil {
		return m.CheckDb
	}
	return false
}

type TracerouteArg struct {
	Traceroutes          []*TracerouteMeasurement `protobuf:"bytes,1,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TracerouteArg) Reset()         { *m = TracerouteArg{} }
func (m *TracerouteArg) String() string { return proto.CompactTextString(m) }
func (*TracerouteArg) ProtoMessage()    {}
func (*TracerouteArg) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{1}
}

func (m *TracerouteArg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteArg.Unmarshal(m, b)
}
func (m *TracerouteArg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteArg.Marshal(b, m, deterministic)
}
func (m *TracerouteArg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteArg.Merge(m, src)
}
func (m *TracerouteArg) XXX_Size() int {
	return xxx_messageInfo_TracerouteArg.Size(m)
}
func (m *TracerouteArg) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteArg.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteArg proto.InternalMessageInfo

func (m *TracerouteArg) GetTraceroutes() []*TracerouteMeasurement {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type TracerouteArgResp struct {
	Traceroutes          []*Traceroute `protobuf:"bytes,1,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TracerouteArgResp) Reset()         { *m = TracerouteArgResp{} }
func (m *TracerouteArgResp) String() string { return proto.CompactTextString(m) }
func (*TracerouteArgResp) ProtoMessage()    {}
func (*TracerouteArgResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{2}
}

func (m *TracerouteArgResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteArgResp.Unmarshal(m, b)
}
func (m *TracerouteArgResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteArgResp.Marshal(b, m, deterministic)
}
func (m *TracerouteArgResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteArgResp.Merge(m, src)
}
func (m *TracerouteArgResp) XXX_Size() int {
	return xxx_messageInfo_TracerouteArgResp.Size(m)
}
func (m *TracerouteArgResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteArgResp.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteArgResp proto.InternalMessageInfo

func (m *TracerouteArgResp) GetTraceroutes() []*Traceroute {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type TracerouteHop struct {
	Addr                 uint32   `protobuf:"varint,1,opt,name=addr,proto3" json:"addr,omitempty"`
	ProbeTtl             uint32   `protobuf:"varint,2,opt,name=probe_ttl,json=probeTtl,proto3" json:"probe_ttl,omitempty"`
	ProbeId              uint32   `protobuf:"varint,3,opt,name=probe_id,json=probeId,proto3" json:"probe_id,omitempty"`
	ProbeSize            uint32   `protobuf:"varint,4,opt,name=probe_size,json=probeSize,proto3" json:"probe_size,omitempty"`
	Rtt                  *RTT     `protobuf:"bytes,5,opt,name=rtt,proto3" json:"rtt,omitempty"`
	ReplyTtl             uint32   `protobuf:"varint,6,opt,name=reply_ttl,json=replyTtl,proto3" json:"reply_ttl,omitempty"`
	ReplyTos             uint32   `protobuf:"varint,7,opt,name=reply_tos,json=replyTos,proto3" json:"reply_tos,omitempty"`
	ReplySize            uint32   `protobuf:"varint,8,opt,name=reply_size,json=replySize,proto3" json:"reply_size,omitempty"`
	ReplyIpid            uint32   `protobuf:"varint,9,opt,name=reply_ipid,json=replyIpid,proto3" json:"reply_ipid,omitempty"`
	IcmpType             uint32   `protobuf:"varint,10,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	IcmpCode             uint32   `protobuf:"varint,11,opt,name=icmp_code,json=icmpCode,proto3" json:"icmp_code,omitempty"`
	IcmpQTtl             uint32   `protobuf:"varint,12,opt,name=icmp_q_ttl,json=icmpQTtl,proto3" json:"icmp_q_ttl,omitempty"`
	IcmpQIpl             uint32   `protobuf:"varint,13,opt,name=icmp_q_ipl,json=icmpQIpl,proto3" json:"icmp_q_ipl,omitempty"`
	IcmpQTos             uint32   `protobuf:"varint,14,opt,name=icmp_q_tos,json=icmpQTos,proto3" json:"icmp_q_tos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteHop) Reset()         { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()    {}
func (*TracerouteHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{3}
}

func (m *TracerouteHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteHop.Unmarshal(m, b)
}
func (m *TracerouteHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteHop.Marshal(b, m, deterministic)
}
func (m *TracerouteHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteHop.Merge(m, src)
}
func (m *TracerouteHop) XXX_Size() int {
	return xxx_messageInfo_TracerouteHop.Size(m)
}
func (m *TracerouteHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteHop.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteHop proto.InternalMessageInfo

func (m *TracerouteHop) GetAddr() uint32 {
	if m != nil {
		return m.Addr
	}
	return 0
}

func (m *TracerouteHop) GetProbeTtl() uint32 {
	if m != nil {
		return m.ProbeTtl
	}
	return 0
}

func (m *TracerouteHop) GetProbeId() uint32 {
	if m != nil {
		return m.ProbeId
	}
	return 0
}

func (m *TracerouteHop) GetProbeSize() uint32 {
	if m != nil {
		return m.ProbeSize
	}
	return 0
}

func (m *TracerouteHop) GetRtt() *RTT {
	if m != nil {
		return m.Rtt
	}
	return nil
}

func (m *TracerouteHop) GetReplyTtl() uint32 {
	if m != nil {
		return m.ReplyTtl
	}
	return 0
}

func (m *TracerouteHop) GetReplyTos() uint32 {
	if m != nil {
		return m.ReplyTos
	}
	return 0
}

func (m *TracerouteHop) GetReplySize() uint32 {
	if m != nil {
		return m.ReplySize
	}
	return 0
}

func (m *TracerouteHop) GetReplyIpid() uint32 {
	if m != nil {
		return m.ReplyIpid
	}
	return 0
}

func (m *TracerouteHop) GetIcmpType() uint32 {
	if m != nil {
		return m.IcmpType
	}
	return 0
}

func (m *TracerouteHop) GetIcmpCode() uint32 {
	if m != nil {
		return m.IcmpCode
	}
	return 0
}

func (m *TracerouteHop) GetIcmpQTtl() uint32 {
	if m != nil {
		return m.IcmpQTtl
	}
	return 0
}

func (m *TracerouteHop) GetIcmpQIpl() uint32 {
	if m != nil {
		return m.IcmpQIpl
	}
	return 0
}

func (m *TracerouteHop) GetIcmpQTos() uint32 {
	if m != nil {
		return m.IcmpQTos
	}
	return 0
}

type Traceroute struct {
	Type                 string           `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	UserId               uint32           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Method               string           `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Src                  uint32           `protobuf:"varint,4,opt,name=src,proto3" json:"src,omitempty"`
	Dst                  uint32           `protobuf:"varint,5,opt,name=dst,proto3" json:"dst,omitempty"`
	Sport                uint32           `protobuf:"varint,6,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport                uint32           `protobuf:"varint,7,opt,name=dport,proto3" json:"dport,omitempty"`
	StopReason           string           `protobuf:"bytes,8,opt,name=stop_reason,json=stopReason,proto3" json:"stop_reason,omitempty"`
	StopData             uint32           `protobuf:"varint,9,opt,name=stop_data,json=stopData,proto3" json:"stop_data,omitempty"`
	Start                *TracerouteTime  `protobuf:"bytes,10,opt,name=start,proto3" json:"start,omitempty"`
	HopCount             uint32           `protobuf:"varint,11,opt,name=hop_count,json=hopCount,proto3" json:"hop_count,omitempty"`
	Attempts             uint32           `protobuf:"varint,12,opt,name=attempts,proto3" json:"attempts,omitempty"`
	Hoplimit             uint32           `protobuf:"varint,13,opt,name=hoplimit,proto3" json:"hoplimit,omitempty"`
	Firsthop             uint32           `protobuf:"varint,14,opt,name=firsthop,proto3" json:"firsthop,omitempty"`
	Wait                 uint32           `protobuf:"varint,15,opt,name=wait,proto3" json:"wait,omitempty"`
	WaitProbe            uint32           `protobuf:"varint,16,opt,name=wait_probe,json=waitProbe,proto3" json:"wait_probe,omitempty"`
	Tos                  uint32           `protobuf:"varint,17,opt,name=tos,proto3" json:"tos,omitempty"`
	ProbeSize            uint32           `protobuf:"varint,18,opt,name=probe_size,json=probeSize,proto3" json:"probe_size,omitempty"`
	Hops                 []*TracerouteHop `protobuf:"bytes,19,rep,name=hops,proto3" json:"hops,omitempty"`
	Error                string           `protobuf:"bytes,20,opt,name=error,proto3" json:"error,omitempty"`
	Version              string           `protobuf:"bytes,21,opt,name=version,proto3" json:"version,omitempty"`
	GapLimit             uint32           `protobuf:"varint,22,opt,name=gap_limit,json=gapLimit,proto3" json:"gap_limit,omitempty"`
	Id                   int64            `protobuf:"varint,23,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Traceroute) Reset()         { *m = Traceroute{} }
func (m *Traceroute) String() string { return proto.CompactTextString(m) }
func (*Traceroute) ProtoMessage()    {}
func (*Traceroute) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{4}
}

func (m *Traceroute) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Traceroute.Unmarshal(m, b)
}
func (m *Traceroute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Traceroute.Marshal(b, m, deterministic)
}
func (m *Traceroute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Traceroute.Merge(m, src)
}
func (m *Traceroute) XXX_Size() int {
	return xxx_messageInfo_Traceroute.Size(m)
}
func (m *Traceroute) XXX_DiscardUnknown() {
	xxx_messageInfo_Traceroute.DiscardUnknown(m)
}

var xxx_messageInfo_Traceroute proto.InternalMessageInfo

func (m *Traceroute) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Traceroute) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Traceroute) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *Traceroute) GetSrc() uint32 {
	if m != nil {
		return m.Src
	}
	return 0
}

func (m *Traceroute) GetDst() uint32 {
	if m != nil {
		return m.Dst
	}
	return 0
}

func (m *Traceroute) GetSport() uint32 {
	if m != nil {
		return m.Sport
	}
	return 0
}

func (m *Traceroute) GetDport() uint32 {
	if m != nil {
		return m.Dport
	}
	return 0
}

func (m *Traceroute) GetStopReason() string {
	if m != nil {
		return m.StopReason
	}
	return ""
}

func (m *Traceroute) GetStopData() uint32 {
	if m != nil {
		return m.StopData
	}
	return 0
}

func (m *Traceroute) GetStart() *TracerouteTime {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Traceroute) GetHopCount() uint32 {
	if m != nil {
		return m.HopCount
	}
	return 0
}

func (m *Traceroute) GetAttempts() uint32 {
	if m != nil {
		return m.Attempts
	}
	return 0
}

func (m *Traceroute) GetHoplimit() uint32 {
	if m != nil {
		return m.Hoplimit
	}
	return 0
}

func (m *Traceroute) GetFirsthop() uint32 {
	if m != nil {
		return m.Firsthop
	}
	return 0
}

func (m *Traceroute) GetWait() uint32 {
	if m != nil {
		return m.Wait
	}
	return 0
}

func (m *Traceroute) GetWaitProbe() uint32 {
	if m != nil {
		return m.WaitProbe
	}
	return 0
}

func (m *Traceroute) GetTos() uint32 {
	if m != nil {
		return m.Tos
	}
	return 0
}

func (m *Traceroute) GetProbeSize() uint32 {
	if m != nil {
		return m.ProbeSize
	}
	return 0
}

func (m *Traceroute) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

func (m *Traceroute) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Traceroute) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Traceroute) GetGapLimit() uint32 {
	if m != nil {
		return m.GapLimit
	}
	return 0
}

func (m *Traceroute) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type TracerouteTime struct {
	Sec                  int64    `protobuf:"varint,1,opt,name=sec,proto3" json:"sec,omitempty"`
	Usec                 int64    `protobuf:"varint,2,opt,name=usec,proto3" json:"usec,omitempty"`
	Ftime                string   `protobuf:"bytes,3,opt,name=ftime,proto3" json:"ftime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteTime) Reset()         { *m = TracerouteTime{} }
func (m *TracerouteTime) String() string { return proto.CompactTextString(m) }
func (*TracerouteTime) ProtoMessage()    {}
func (*TracerouteTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_364d4b9d6b4af0cc, []int{5}
}

func (m *TracerouteTime) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteTime.Unmarshal(m, b)
}
func (m *TracerouteTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteTime.Marshal(b, m, deterministic)
}
func (m *TracerouteTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteTime.Merge(m, src)
}
func (m *TracerouteTime) XXX_Size() int {
	return xxx_messageInfo_TracerouteTime.Size(m)
}
func (m *TracerouteTime) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteTime.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteTime proto.InternalMessageInfo

func (m *TracerouteTime) GetSec() int64 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *TracerouteTime) GetUsec() int64 {
	if m != nil {
		return m.Usec
	}
	return 0
}

func (m *TracerouteTime) GetFtime() string {
	if m != nil {
		return m.Ftime
	}
	return ""
}

func init() {
	proto.RegisterType((*TracerouteMeasurement)(nil), "datamodel.TracerouteMeasurement")
	proto.RegisterType((*TracerouteArg)(nil), "datamodel.TracerouteArg")
	proto.RegisterType((*TracerouteArgResp)(nil), "datamodel.TracerouteArgResp")
	proto.RegisterType((*TracerouteHop)(nil), "datamodel.TracerouteHop")
	proto.RegisterType((*Traceroute)(nil), "datamodel.Traceroute")
	proto.RegisterType((*TracerouteTime)(nil), "datamodel.TracerouteTime")
}

func init() {
	proto.RegisterFile("github.com/NEU-SNS/ReverseTraceroute/datamodel/traceroute.proto", fileDescriptor_364d4b9d6b4af0cc)
}

var fileDescriptor_364d4b9d6b4af0cc = []byte{
	// 1010 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x4f, 0x63, 0x37,
	0x10, 0x57, 0x48, 0x80, 0xc4, 0x21, 0x2c, 0x78, 0x17, 0xd6, 0xb0, 0xb4, 0x1b, 0xd1, 0x4b, 0x0e,
	0x2d, 0x91, 0xe8, 0xa1, 0xea, 0xa9, 0x62, 0x01, 0x69, 0x91, 0x28, 0x6a, 0x1f, 0xe9, 0xa5, 0x97,
	0x27, 0xe7, 0x79, 0x20, 0x56, 0xdf, 0x8b, 0x5d, 0xdb, 0xd9, 0x92, 0xfd, 0x44, 0xfd, 0x6a, 0xbd,
	0xf5, 0x23, 0x54, 0x33, 0x7e, 0x7f, 0x92, 0x2a, 0x97, 0x3d, 0xc5, 0xf3, 0xfb, 0xf9, 0x8d, 0xc7,
	0x33, 0xf3, 0x1b, 0x87, 0xfd, 0xf4, 0xac, 0xc3, 0x6c, 0x31, 0xbd, 0xc8, 0x4c, 0x31, 0x7e, 0xb8,
	0xfd, 0xed, 0xbb, 0xc7, 0x87, 0xc7, 0x71, 0x02, 0x9f, 0xc0, 0x79, 0x98, 0x38, 0x99, 0x81, 0x33,
	0x8b, 0x00, 0x63, 0x25, 0x83, 0x2c, 0x8c, 0x82, 0x7c, 0x1c, 0x6a, 0xf0, 0xc2, 0x3a, 0x13, 0x0c,
	0xef, 0xd5, 0xdc, 0xe9, 0x8f, 0x5f, 0xea, 0x4b, 0x17, 0xa5, 0x97, 0xf3, 0x7f, 0xb6, 0xd9, 0x51,
	0xb3, 0xe7, 0x67, 0x90, 0x7e, 0xe1, 0xa0, 0x80, 0x79, 0xe0, 0x67, 0xac, 0xe7, 0x83, 0xcc, 0x61,
	0x0e, 0xde, 0x8b, 0xd6, 0xb0, 0x35, 0x6a, 0x27, 0x0d, 0xc0, 0x0f, 0x58, 0x5b, 0xf9, 0x20, 0xda,
	0xc3, 0xd6, 0x68, 0x90, 0xe0, 0x92, 0x7f, 0xcd, 0x58, 0x66, 0xe6, 0x4f, 0x5a, 0xc1, 0x3c, 0x03,
	0xd1, 0x19, 0xb6, 0x46, 0xbd, 0x64, 0x05, 0xe1, 0x6f, 0xd8, 0xb6, 0xb2, 0xc6, 0x05, 0xb1, 0x4d,
	0x54, 0x34, 0xf8, 0x3b, 0xd6, 0x7b, 0xd2, 0xce, 0x87, 0x74, 0x66, 0xac, 0xd8, 0x21, 0xa6, 0x4b,
	0xc0, 0x47, 0x63, 0x91, 0x7c, 0x96, 0x36, 0xcd, 0x75, 0xa1, 0x83, 0xd8, 0x8d, 0xe4, 0xb3, 0xb4,
	0xf7, 0x68, 0xf3, 0xaf, 0x18, 0x43, 0x52, 0x66, 0x41, 0x9b, 0xb9, 0xe8, 0x12, 0x8b, 0xdb, 0xaf,
	0x08, 0xe0, 0x6f, 0xd9, 0x6e, 0x21, 0x5f, 0xd2, 0x10, 0x72, 0xd1, 0x23, 0x6e, 0xa7, 0x90, 0x2f,
	0x93, 0x90, 0xf3, 0xf7, 0xac, 0x6f, 0x65, 0x98, 0xa5, 0x4a, 0xfb, 0xcc, 0x7c, 0x12, 0x6c, 0xd8,
	0x1a, 0x75, 0x13, 0x86, 0xd0, 0x0d, 0x21, 0x18, 0x68, 0x6e, 0x8c, 0xf5, 0xa2, 0x1f, 0x03, 0x25,
	0x03, 0x3f, 0xc3, 0x45, 0x75, 0xde, 0x5e, 0xbc, 0x1f, 0x42, 0xe5, 0x81, 0x82, 0xed, 0x5a, 0xb9,
	0xcc, 0x8d, 0x54, 0x62, 0x40, 0x64, 0x65, 0xf2, 0x63, 0xb6, 0x53, 0x40, 0x98, 0x19, 0x25, 0xf6,
	0xcb, 0x48, 0xc8, 0xe2, 0xa7, 0xac, 0x2b, 0x43, 0x80, 0xc2, 0x06, 0x2f, 0x5e, 0xc5, 0xdb, 0x55,
	0x36, 0x3f, 0x61, 0x5d, 0x0f, 0x73, 0x95, 0xca, 0x3c, 0x17, 0x07, 0x14, 0xe2, 0x2e, 0xda, 0x57,
	0x79, 0x8e, 0xf1, 0x79, 0x4a, 0xe4, 0x61, 0x8c, 0x8f, 0x0c, 0x2c, 0x88, 0x77, 0x99, 0xe0, 0xb1,
	0x20, 0xde, 0x65, 0x88, 0x04, 0xe3, 0xc5, 0x6b, 0xda, 0x85, 0x4b, 0xfe, 0x0d, 0x1b, 0x60, 0xe9,
	0x53, 0x78, 0xc9, 0x00, 0x14, 0x28, 0xf1, 0x86, 0x3c, 0xef, 0x21, 0x78, 0x5b, 0x62, 0x98, 0xb8,
	0x85, 0x07, 0x97, 0x6a, 0x25, 0x8e, 0x62, 0xb8, 0x68, 0xde, 0x29, 0xce, 0x59, 0xe7, 0x2f, 0xa9,
	0x83, 0x38, 0x26, 0x94, 0xd6, 0x58, 0x04, 0xfc, 0x4d, 0xad, 0x33, 0x53, 0x10, 0x6f, 0x63, 0x11,
	0x10, 0xf9, 0x05, 0x01, 0x2a, 0xa0, 0xf7, 0x29, 0xcc, 0x83, 0x5b, 0x0a, 0x51, 0x16, 0xd0, 0xfb,
	0x5b, 0xb4, 0xf1, 0x8a, 0xb9, 0xf7, 0xe9, 0x5c, 0x16, 0x20, 0x4e, 0x62, 0xc6, 0x72, 0xef, 0x1f,
	0x64, 0x01, 0x98, 0x4b, 0x8c, 0xc9, 0x2c, 0x82, 0x38, 0xa5, 0xce, 0xab, 0x4c, 0x2c, 0x43, 0x36,
	0x83, 0xec, 0x8f, 0x34, 0x93, 0xd9, 0x0c, 0xc4, 0xbb, 0x58, 0x3d, 0x82, 0xae, 0x11, 0x41, 0xaf,
	0x71, 0x83, 0x9a, 0x8a, 0xb3, 0x98, 0x38, 0xb2, 0x6f, 0xa6, 0xe7, 0x8f, 0x6c, 0xd0, 0xb4, 0xfa,
	0x95, 0x7b, 0xe6, 0x1f, 0x58, 0xbf, 0x91, 0x15, 0x36, 0x79, 0x7b, 0xd4, 0xbf, 0x1c, 0x5e, 0xd4,
	0x42, 0xb9, 0xd8, 0xa8, 0x8c, 0x64, 0xf5, 0xa3, 0xf3, 0x7b, 0x76, 0xb8, 0xe6, 0x34, 0x01, 0x6f,
	0xf9, 0x0f, 0x9b, 0x1c, 0x1f, 0x6d, 0x74, 0xbc, 0xee, 0xed, 0xef, 0xf6, 0x6a, 0x8c, 0xa8, 0x01,
	0xce, 0x3a, 0x52, 0x29, 0x47, 0x0a, 0x1c, 0x24, 0xb4, 0xc6, 0xb4, 0x52, 0xc2, 0xa9, 0xbb, 0xb7,
	0x88, 0xe8, 0x12, 0x80, 0xfd, 0x7d, 0xc2, 0xe2, 0x1a, 0x0b, 0x18, 0xe5, 0xb9, 0x4b, 0xf6, 0x9d,
	0xc2, 0x6a, 0x45, 0xca, 0xeb, 0xcf, 0x51, 0xa2, 0x83, 0x24, 0x7a, 0x7a, 0xd4, 0x9f, 0x81, 0x0f,
	0x59, 0xdb, 0x85, 0xa8, 0xcf, 0xfe, 0xe5, 0xfe, 0x4a, 0xb4, 0xc9, 0x64, 0x92, 0x20, 0x85, 0x07,
	0x3b, 0xb0, 0xf9, 0x92, 0x0e, 0xde, 0x89, 0x07, 0x13, 0x80, 0x07, 0x37, 0xa4, 0xf1, 0xa4, 0xd6,
	0x9a, 0x34, 0x1e, 0x8f, 0x8e, 0x24, 0x1d, 0xdd, 0x8d, 0x47, 0x13, 0x42, 0x47, 0xd7, 0xb4, 0xb6,
	0x5a, 0x91, 0x60, 0x2b, 0xfa, 0xce, 0x6a, 0x85, 0xae, 0x75, 0x56, 0xd8, 0x34, 0x2c, 0x2d, 0x90,
	0x62, 0x07, 0x49, 0x17, 0x81, 0xc9, 0xd2, 0x42, 0x4d, 0x66, 0x46, 0x01, 0x69, 0xb6, 0x24, 0xaf,
	0x8d, 0x02, 0x7e, 0xc6, 0x18, 0x91, 0x7f, 0x52, 0xc8, 0x7b, 0x0d, 0xfb, 0x2b, 0x86, 0xdc, 0xb0,
	0xda, 0xe6, 0x24, 0xdb, 0x8a, 0xbd, 0xb3, 0xab, 0x2c, 0xde, 0x68, 0x7f, 0xf5, 0x5b, 0xe3, 0xcf,
	0xff, 0xed, 0x30, 0xd6, 0x94, 0x0a, 0xeb, 0x44, 0xd1, 0xb5, 0xa2, 0x3a, 0x70, 0xbd, 0x2a, 0xa5,
	0x58, 0xa5, 0x4a, 0x4a, 0xcd, 0x44, 0x68, 0xaf, 0x4d, 0x84, 0x52, 0xc4, 0x9d, 0x35, 0x11, 0xe3,
	0x9c, 0xdd, 0x6e, 0xe6, 0x6c, 0x2d, 0xff, 0x98, 0xff, 0x52, 0xfe, 0xf5, 0x74, 0x8d, 0x89, 0x2f,
	0xa7, 0xeb, 0x7b, 0xd6, 0xf7, 0xc1, 0xd8, 0xd4, 0x81, 0xf4, 0xf5, 0x90, 0x64, 0x08, 0x25, 0x84,
	0x60, 0xee, 0x68, 0x03, 0xd6, 0xba, 0x4c, 0x7b, 0x17, 0x81, 0x1b, 0x19, 0x24, 0x1f, 0xb3, 0x6d,
	0x1f, 0xa4, 0x0b, 0x94, 0xf1, 0xfe, 0xe5, 0xc9, 0xc6, 0xfe, 0x9d, 0xe8, 0x02, 0x92, 0xb8, 0x0f,
	0xbd, 0xcd, 0x0c, 0x16, 0x62, 0x31, 0x0f, 0x55, 0x25, 0x66, 0xc6, 0x5e, 0xa3, 0xbd, 0x36, 0xed,
	0xca, 0x3a, 0xd4, 0xd3, 0xee, 0x94, 0xe1, 0xbe, 0x38, 0xe7, 0x07, 0xf5, 0x77, 0x64, 0x23, 0x47,
	0x0f, 0x02, 0x3e, 0x10, 0x65, 0x0d, 0x2a, 0xbb, 0x1e, 0x49, 0xaf, 0xa2, 0x38, 0x36, 0x8c, 0xa4,
	0x83, 0xd8, 0x4a, 0xcd, 0x48, 0x2a, 0xa7, 0xe2, 0x61, 0x4c, 0x68, 0x88, 0xad, 0xb9, 0xa2, 0x0a,
	0xfe, 0x7f, 0x55, 0x7c, 0xcb, 0x3a, 0x33, 0x7c, 0x0d, 0x5e, 0x93, 0x88, 0xc5, 0xc6, 0x24, 0x7c,
	0x34, 0x36, 0xa1, 0x5d, 0x58, 0x07, 0x70, 0xce, 0x38, 0x1a, 0xad, 0xbd, 0x24, 0x1a, 0x38, 0xcf,
	0xf0, 0x35, 0xc6, 0x87, 0x23, 0xce, 0xd4, 0xca, 0x5c, 0x7f, 0xe2, 0x8e, 0xe3, 0xf5, 0xea, 0x27,
	0x6e, 0x9f, 0x6d, 0x69, 0x45, 0x53, 0xb5, 0x9d, 0x6c, 0x69, 0x75, 0x7e, 0xcf, 0xf6, 0xd7, 0x13,
	0x4f, 0x0d, 0x03, 0x59, 0xf9, 0x3c, 0xe3, 0x12, 0x53, 0xb2, 0x40, 0x68, 0x8b, 0x20, 0x5a, 0x63,
	0x50, 0x4f, 0x38, 0x40, 0xcb, 0x6e, 0x8b, 0xc6, 0x87, 0xfe, 0xef, 0xcd, 0x5f, 0x88, 0xe9, 0x0e,
	0xfd, 0x1d, 0xf8, 0xfe, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xd4, 0xa5, 0x2d, 0x97, 0x08,
	0x00, 0x00,
}
